import{r as o,j as e,n as l,L as H,C as h,d as y,e as f,f as E,g,B as p,o as F,i as G,I as O,k as D,T as k,a as U,b as q,c as j,F as L,l as M}from"./index-CAyDHNzl.js";import{A as z,a as _,b as B,c as X}from"./accordion-Bkox8oVz.js";const N=o.forwardRef(({className:t,...n},r)=>e.jsx("div",{className:"relative w-full overflow-auto",children:e.jsx("table",{ref:r,className:l("w-full caption-bottom text-sm",t),...n})}));N.displayName="Table";const R=o.forwardRef(({className:t,...n},r)=>e.jsx("thead",{ref:r,className:l("[&_tr]:border-b",t),...n}));R.displayName="TableHeader";const A=o.forwardRef(({className:t,...n},r)=>e.jsx("tbody",{ref:r,className:l("[&_tr:last-child]:border-0",t),...n}));A.displayName="TableBody";const $=o.forwardRef(({className:t,...n},r)=>e.jsx("tfoot",{ref:r,className:l("border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",t),...n}));$.displayName="TableFooter";const x=o.forwardRef(({className:t,...n},r)=>e.jsx("tr",{ref:r,className:l("border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",t),...n}));x.displayName="TableRow";const u=o.forwardRef(({className:t,...n},r)=>e.jsx("th",{ref:r,className:l("h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",t),...n}));u.displayName="TableHead";const c=o.forwardRef(({className:t,...n},r)=>e.jsx("td",{ref:r,className:l("p-4 align-middle [&:has([role=checkbox])]:pr-0",t),...n}));c.displayName="TableCell";const J=o.forwardRef(({className:t,...n},r)=>e.jsx("caption",{ref:r,className:l("mt-4 text-sm text-muted-foreground",t),...n}));J.displayName="TableCaption";const Y=()=>{const[t,n]=o.useState(""),r=(s,d)=>d?s.filter(S=>S.name.toLowerCase().includes(d.toLowerCase())||S.description.toLowerCase().includes(d.toLowerCase())||S.category.toLowerCase().includes(d.toLowerCase())):s,v=[{name:"PHR Service API",category:"Core",description:"Manages personal health records with FHIR R4 compatibility",endpoints:[{method:"GET",path:"/api/phr/patients/{id}",description:"Retrieve a patient's complete health record",params:[{name:"id",type:"string",required:!0,description:"Patient ID"}],responses:[{code:"200",description:"Patient record retrieved successfully"},{code:"404",description:"Patient not found"},{code:"403",description:"Access denied"}]},{method:"GET",path:"/api/phr/patients/{id}/resources",description:"Retrieve all FHIR resources for a patient",params:[{name:"id",type:"string",required:!0,description:"Patient ID"},{name:"resourceType",type:"string",required:!1,description:"Filter by resource type (e.g., Observation, Condition)"},{name:"date",type:"string",required:!1,description:"Filter by date range (ISO format)"}],responses:[{code:"200",description:"Resources retrieved successfully"},{code:"404",description:"Patient not found"},{code:"403",description:"Access denied"}]},{method:"POST",path:"/api/phr/patients/{id}/resources",description:"Add a new resource to patient record",params:[{name:"id",type:"string",required:!0,description:"Patient ID"},{name:"resource",type:"object",required:!0,description:"FHIR resource object"}],responses:[{code:"201",description:"Resource created successfully"},{code:"400",description:"Invalid resource format"},{code:"404",description:"Patient not found"},{code:"403",description:"Access denied"}]},{method:"PUT",path:"/api/phr/patients/{id}/resources/{resourceId}",description:"Update an existing resource",params:[{name:"id",type:"string",required:!0,description:"Patient ID"},{name:"resourceId",type:"string",required:!0,description:"Resource ID"},{name:"resource",type:"object",required:!0,description:"Updated FHIR resource object"}],responses:[{code:"200",description:"Resource updated successfully"},{code:"400",description:"Invalid resource format"},{code:"404",description:"Resource not found"},{code:"403",description:"Access denied"}]},{method:"GET",path:"/api/phr/patients/{id}/summary",description:"Generate a patient summary record",params:[{name:"id",type:"string",required:!0,description:"Patient ID"},{name:"format",type:"string",required:!1,description:"Summary format (FHIR, CDA, etc.)"}],responses:[{code:"200",description:"Summary generated successfully"},{code:"404",description:"Patient not found"},{code:"403",description:"Access denied"}]}]},{name:"Universal Consent Service API",category:"Core",description:"Manages consent policies and access decisions",endpoints:[{method:"GET",path:"/api/consent/patients/{id}/consents",description:"Retrieve all consents for a patient",params:[{name:"id",type:"string",required:!0,description:"Patient ID"},{name:"status",type:"string",required:!1,description:"Filter by consent status"}],responses:[{code:"200",description:"Consents retrieved successfully"},{code:"404",description:"Patient not found"}]},{method:"POST",path:"/api/consent/patients/{id}/consents",description:"Record a new consent for a patient",params:[{name:"id",type:"string",required:!0,description:"Patient ID"},{name:"consent",type:"object",required:!0,description:"Consent details"}],responses:[{code:"201",description:"Consent recorded successfully"},{code:"400",description:"Invalid consent format"},{code:"404",description:"Patient not found"}]},{method:"POST",path:"/api/consent/check",description:"Check if an action is allowed under existing consents",params:[{name:"patientId",type:"string",required:!0,description:"Patient ID"},{name:"actor",type:"object",required:!0,description:"Actor requesting access"},{name:"purpose",type:"string",required:!0,description:"Purpose of use"},{name:"resource",type:"object",required:!0,description:"Resource being accessed"}],responses:[{code:"200",description:"Access decision returned"},{code:"400",description:"Invalid request format"},{code:"404",description:"Patient or policy not found"}]},{method:"POST",path:"/api/consent/request",description:"Request consent for a specific purpose",params:[{name:"patientId",type:"string",required:!0,description:"Patient ID"},{name:"requestor",type:"object",required:!0,description:"Entity requesting consent"},{name:"purpose",type:"string",required:!0,description:"Purpose of use"},{name:"resources",type:"array",required:!0,description:"Resources needing consent"}],responses:[{code:"202",description:"Consent request submitted"},{code:"400",description:"Invalid request format"},{code:"404",description:"Patient not found"}]},{method:"PUT",path:"/api/consent/patients/{id}/consents/{consentId}",description:"Update consent status (e.g., revoke)",params:[{name:"id",type:"string",required:!0,description:"Patient ID"},{name:"consentId",type:"string",required:!0,description:"Consent ID"},{name:"status",type:"string",required:!0,description:"New consent status"}],responses:[{code:"200",description:"Consent updated successfully"},{code:"400",description:"Invalid status"},{code:"404",description:"Consent not found"}]}]},{name:"User Directory Service API",category:"Core",description:"Manages user accounts and authentication",endpoints:[{method:"POST",path:"/api/users/authenticate",description:"Authenticate a user and generate access token",params:[{name:"username",type:"string",required:!0,description:"User's username"},{name:"password",type:"string",required:!0,description:"User's password"}],responses:[{code:"200",description:"Authentication successful, tokens returned"},{code:"401",description:"Authentication failed"},{code:"403",description:"Account locked or requires additional verification"}]},{method:"POST",path:"/api/users/refresh",description:"Refresh an access token using a refresh token",params:[{name:"refreshToken",type:"string",required:!0,description:"Valid refresh token"}],responses:[{code:"200",description:"New access token generated"},{code:"401",description:"Invalid refresh token"}]},{method:"GET",path:"/api/users/{id}",description:"Retrieve user profile information",params:[{name:"id",type:"string",required:!0,description:"User ID"}],responses:[{code:"200",description:"User profile retrieved"},{code:"404",description:"User not found"}]},{method:"PUT",path:"/api/users/{id}",description:"Update user profile information",params:[{name:"id",type:"string",required:!0,description:"User ID"},{name:"profile",type:"object",required:!0,description:"Updated profile data"}],responses:[{code:"200",description:"Profile updated successfully"},{code:"400",description:"Invalid profile data"},{code:"404",description:"User not found"}]},{method:"POST",path:"/api/users/{id}/mfa/enroll",description:"Enroll in multi-factor authentication",params:[{name:"id",type:"string",required:!0,description:"User ID"},{name:"mfaType",type:"string",required:!0,description:"MFA method type"}],responses:[{code:"200",description:"MFA enrollment successful"},{code:"400",description:"Invalid MFA type"},{code:"404",description:"User not found"}]}]},{name:"Master Person/Patient Index API",category:"Core",description:"Manages person identification and record linkage",endpoints:[{method:"GET",path:"/api/mpi/persons/{id}",description:"Retrieve a person record by ID",params:[{name:"id",type:"string",required:!0,description:"Person ID"}],responses:[{code:"200",description:"Person found"},{code:"404",description:"Person not found"}]},{method:"POST",path:"/api/mpi/persons/search",description:"Search for persons by demographic data",params:[{name:"demographics",type:"object",required:!0,description:"Demographic search criteria"}],responses:[{code:"200",description:"Search results returned"},{code:"400",description:"Invalid search criteria"}]},{method:"POST",path:"/api/mpi/persons",description:"Register a new person in the MPI",params:[{name:"person",type:"object",required:!0,description:"Person demographic data"}],responses:[{code:"201",description:"Person registered successfully"},{code:"400",description:"Invalid person data"},{code:"409",description:"Potential duplicate detected"}]},{method:"GET",path:"/api/mpi/patients/{id}",description:"Retrieve a patient record by ID",params:[{name:"id",type:"string",required:!0,description:"Patient ID"}],responses:[{code:"200",description:"Patient found"},{code:"404",description:"Patient not found"}]},{method:"POST",path:"/api/mpi/link",description:"Link two person records as same individual",params:[{name:"personId1",type:"string",required:!0,description:"First person ID"},{name:"personId2",type:"string",required:!0,description:"Second person ID"},{name:"linkReason",type:"string",required:!0,description:"Reason for linking"}],responses:[{code:"200",description:"Records linked successfully"},{code:"400",description:"Invalid link request"},{code:"404",description:"One or both persons not found"}]}]}],b=[{name:"Claims Processing Service API",category:"Claims",description:"Handles claim submission, tracking, and processing",endpoints:[{method:"POST",path:"/api/claims",description:"Submit a new claim",params:[{name:"claim",type:"object",required:!0,description:"Claim data in FHIR or X12 format"},{name:"submissionPath",type:"string",required:!1,description:"'direct' or 'payer' path"}],responses:[{code:"202",description:"Claim submitted successfully"},{code:"400",description:"Invalid claim format"},{code:"422",description:"Claim validation failed"}]},{method:"GET",path:"/api/claims/{id}",description:"Retrieve a claim by ID",params:[{name:"id",type:"string",required:!0,description:"Claim ID"}],responses:[{code:"200",description:"Claim retrieved successfully"},{code:"404",description:"Claim not found"}]},{method:"GET",path:"/api/claims/patient/{patientId}",description:"Retrieve all claims for a patient",params:[{name:"patientId",type:"string",required:!0,description:"Patient ID"},{name:"status",type:"string",required:!1,description:"Filter by claim status"},{name:"fromDate",type:"string",required:!1,description:"Filter claims from date"},{name:"toDate",type:"string",required:!1,description:"Filter claims to date"}],responses:[{code:"200",description:"Claims retrieved successfully"},{code:"404",description:"Patient not found"}]},{method:"GET",path:"/api/claims/{id}/status",description:"Check claim processing status",params:[{name:"id",type:"string",required:!0,description:"Claim ID"}],responses:[{code:"200",description:"Status retrieved successfully"},{code:"404",description:"Claim not found"}]},{method:"PUT",path:"/api/claims/{id}/cancel",description:"Cancel a submitted claim",params:[{name:"id",type:"string",required:!0,description:"Claim ID"},{name:"reason",type:"string",required:!0,description:"Cancellation reason"}],responses:[{code:"200",description:"Claim cancelled successfully"},{code:"400",description:"Invalid cancellation reason"},{code:"404",description:"Claim not found"},{code:"422",description:"Claim cannot be cancelled"}]}]},{name:"Prior Authorization Service API",category:"Claims",description:"Manages prior authorization requests and responses",endpoints:[{method:"POST",path:"/api/prior-auth",description:"Submit a prior authorization request",params:[{name:"authRequest",type:"object",required:!0,description:"Authorization request details"},{name:"processingPath",type:"string",required:!1,description:"'hub' or 'payer' path"}],responses:[{code:"202",description:"Request submitted successfully"},{code:"400",description:"Invalid request format"},{code:"422",description:"Validation failed"}]},{method:"GET",path:"/api/prior-auth/{id}",description:"Retrieve a prior authorization by ID",params:[{name:"id",type:"string",required:!0,description:"Authorization ID"}],responses:[{code:"200",description:"Authorization retrieved successfully"},{code:"404",description:"Authorization not found"}]},{method:"GET",path:"/api/prior-auth/patient/{patientId}",description:"Retrieve all prior authorizations for a patient",params:[{name:"patientId",type:"string",required:!0,description:"Patient ID"},{name:"status",type:"string",required:!1,description:"Filter by status"}],responses:[{code:"200",description:"Authorizations retrieved successfully"},{code:"404",description:"Patient not found"}]},{method:"GET",path:"/api/prior-auth/{id}/status",description:"Check authorization status",params:[{name:"id",type:"string",required:!0,description:"Authorization ID"}],responses:[{code:"200",description:"Status retrieved successfully"},{code:"404",description:"Authorization not found"}]},{method:"POST",path:"/api/prior-auth/{id}/documents",description:"Add supporting documents to an authorization",params:[{name:"id",type:"string",required:!0,description:"Authorization ID"},{name:"documents",type:"array",required:!0,description:"Document metadata and content"}],responses:[{code:"201",description:"Documents added successfully"},{code:"400",description:"Invalid document format"},{code:"404",description:"Authorization not found"}]}]},{name:"Goldcarding Service API",category:"Claims",description:"Manages provider goldcarding for streamlined authorizations",endpoints:[{method:"GET",path:"/api/goldcarding/providers/{id}/status",description:"Check provider goldcarding status",params:[{name:"id",type:"string",required:!0,description:"Provider ID"},{name:"serviceType",type:"string",required:!1,description:"Specific service to check"}],responses:[{code:"200",description:"Goldcarding status retrieved"},{code:"404",description:"Provider not found"}]},{method:"GET",path:"/api/goldcarding/eligibility",description:"Check service eligibility for goldcarding",params:[{name:"providerId",type:"string",required:!0,description:"Provider ID"},{name:"payerId",type:"string",required:!0,description:"Payer ID"},{name:"serviceCode",type:"string",required:!0,description:"Service code to check"}],responses:[{code:"200",description:"Eligibility status retrieved"},{code:"404",description:"Provider or service not found"}]},{method:"POST",path:"/api/goldcarding/providers/{id}/enroll",description:"Enroll provider in goldcarding program",params:[{name:"id",type:"string",required:!0,description:"Provider ID"},{name:"serviceCodes",type:"array",required:!0,description:"Service codes for goldcarding"},{name:"payerId",type:"string",required:!0,description:"Payer ID"}],responses:[{code:"201",description:"Provider enrolled successfully"},{code:"400",description:"Invalid enrollment data"},{code:"404",description:"Provider not found"},{code:"409",description:"Provider already enrolled"}]},{method:"GET",path:"/api/goldcarding/rules",description:"Retrieve goldcarding rules for a payer",params:[{name:"payerId",type:"string",required:!0,description:"Payer ID"}],responses:[{code:"200",description:"Rules retrieved successfully"},{code:"404",description:"Payer not found"}]},{method:"POST",path:"/api/goldcarding/verify",description:"Verify if a service is goldcarded",params:[{name:"providerId",type:"string",required:!0,description:"Provider ID"},{name:"payerId",type:"string",required:!0,description:"Payer ID"},{name:"patientId",type:"string",required:!0,description:"Patient ID"},{name:"serviceCode",type:"string",required:!0,description:"Service code"}],responses:[{code:"200",description:"Verification result returned"},{code:"404",description:"Provider, payer, or service not found"}]}]},{name:"Eligibility & Benefits Service API",category:"Claims",description:"Provides real-time eligibility verification",endpoints:[{method:"POST",path:"/api/eligibility/verify",description:"Verify patient eligibility with a payer",params:[{name:"patientId",type:"string",required:!0,description:"Patient ID"},{name:"providerId",type:"string",required:!0,description:"Provider ID"},{name:"payerId",type:"string",required:!0,description:"Payer ID"},{name:"serviceTypes",type:"array",required:!1,description:"Service types to check"}],responses:[{code:"200",description:"Eligibility verification completed"},{code:"400",description:"Invalid request format"},{code:"404",description:"Patient, provider, or payer not found"}]},{method:"GET",path:"/api/eligibility/patients/{patientId}/coverages",description:"Retrieve all coverage information for a patient",params:[{name:"patientId",type:"string",required:!0,description:"Patient ID"}],responses:[{code:"200",description:"Coverage information retrieved"},{code:"404",description:"Patient not found"}]},{method:"GET",path:"/api/eligibility/result/{transactionId}",description:"Retrieve results of a previous eligibility check",params:[{name:"transactionId",type:"string",required:!0,description:"Transaction ID from verify call"}],responses:[{code:"200",description:"Eligibility results retrieved"},{code:"404",description:"Transaction not found"}]},{method:"POST",path:"/api/eligibility/benefits/estimate",description:"Estimate patient financial responsibility",params:[{name:"patientId",type:"string",required:!0,description:"Patient ID"},{name:"providerId",type:"string",required:!0,description:"Provider ID"},{name:"services",type:"array",required:!0,description:"Planned services"}],responses:[{code:"200",description:"Benefit estimate calculated"},{code:"400",description:"Invalid request format"},{code:"404",description:"Patient or provider not found"}]}]}],i=[{name:"Integration Gateway API",category:"Integration",description:"Provides connectivity to external healthcare systems",endpoints:[{method:"GET",path:"/api/integration/connections",description:"List all configured external connections",params:[{name:"type",type:"string",required:!1,description:"Filter by connection type"},{name:"status",type:"string",required:!1,description:"Filter by connection status"}],responses:[{code:"200",description:"Connections retrieved successfully"}]},{method:"POST",path:"/api/integration/connections",description:"Configure a new external connection",params:[{name:"connection",type:"object",required:!0,description:"Connection configuration details"}],responses:[{code:"201",description:"Connection created successfully"},{code:"400",description:"Invalid connection configuration"},{code:"409",description:"Connection already exists"}]},{method:"GET",path:"/api/integration/connections/{id}/status",description:"Check connection health status",params:[{name:"id",type:"string",required:!0,description:"Connection ID"}],responses:[{code:"200",description:"Status retrieved successfully"},{code:"404",description:"Connection not found"}]},{method:"POST",path:"/api/integration/connections/{id}/test",description:"Test a connection with sample messages",params:[{name:"id",type:"string",required:!0,description:"Connection ID"},{name:"testMessage",type:"object",required:!0,description:"Sample message to send"}],responses:[{code:"200",description:"Test completed successfully"},{code:"404",description:"Connection not found"},{code:"502",description:"Connection test failed"}]},{method:"GET",path:"/api/integration/connections/{id}/metrics",description:"Retrieve connection usage metrics",params:[{name:"id",type:"string",required:!0,description:"Connection ID"},{name:"period",type:"string",required:!1,description:"Time period for metrics"}],responses:[{code:"200",description:"Metrics retrieved successfully"},{code:"404",description:"Connection not found"}]}]},{name:"Audit Service API",category:"Infrastructure",description:"Captures comprehensive audit trails",endpoints:[{method:"GET",path:"/api/audit/events",description:"Search for audit events",params:[{name:"userId",type:"string",required:!1,description:"Filter by user ID"},{name:"action",type:"string",required:!1,description:"Filter by action type"},{name:"resource",type:"string",required:!1,description:"Filter by resource type"},{name:"fromDate",type:"string",required:!1,description:"Start date for search"},{name:"toDate",type:"string",required:!1,description:"End date for search"}],responses:[{code:"200",description:"Audit events retrieved successfully"}]},{method:"GET",path:"/api/audit/patients/{id}/access",description:"Get all access events for a patient's data",params:[{name:"id",type:"string",required:!0,description:"Patient ID"},{name:"fromDate",type:"string",required:!1,description:"Start date for search"},{name:"toDate",type:"string",required:!1,description:"End date for search"}],responses:[{code:"200",description:"Access events retrieved successfully"},{code:"404",description:"Patient not found"}]},{method:"GET",path:"/api/audit/compliance/reports",description:"Generate compliance reports from audit data",params:[{name:"reportType",type:"string",required:!0,description:"Type of compliance report"},{name:"period",type:"string",required:!0,description:"Reporting period"},{name:"format",type:"string",required:!1,description:"Report format (PDF, CSV, JSON)"}],responses:[{code:"200",description:"Report generated successfully"},{code:"400",description:"Invalid report parameters"}]},{method:"POST",path:"/api/audit/events",description:"Record a custom audit event",params:[{name:"event",type:"object",required:!0,description:"Audit event details"}],responses:[{code:"201",description:"Event recorded successfully"},{code:"400",description:"Invalid event format"}]}]},{name:"Notification Service API",category:"Infrastructure",description:"Handles delivery of notifications across multiple channels",endpoints:[{method:"POST",path:"/api/notifications/send",description:"Send a notification to recipients",params:[{name:"notification",type:"object",required:!0,description:"Notification content and recipients"},{name:"channels",type:"array",required:!1,description:"Delivery channels (email, SMS, push, etc.)"}],responses:[{code:"202",description:"Notification accepted for delivery"},{code:"400",description:"Invalid notification format"}]},{method:"GET",path:"/api/notifications/users/{id}",description:"Retrieve notifications for a user",params:[{name:"id",type:"string",required:!0,description:"User ID"},{name:"status",type:"string",required:!1,description:"Filter by read/unread status"},{name:"limit",type:"number",required:!1,description:"Maximum notifications to return"}],responses:[{code:"200",description:"Notifications retrieved successfully"},{code:"404",description:"User not found"}]},{method:"PUT",path:"/api/notifications/{id}/read",description:"Mark a notification as read",params:[{name:"id",type:"string",required:!0,description:"Notification ID"}],responses:[{code:"200",description:"Notification marked as read"},{code:"404",description:"Notification not found"}]},{method:"GET",path:"/api/notifications/{id}/status",description:"Check delivery status of a notification",params:[{name:"id",type:"string",required:!0,description:"Notification ID"}],responses:[{code:"200",description:"Status retrieved successfully"},{code:"404",description:"Notification not found"}]},{method:"PUT",path:"/api/notifications/users/{id}/preferences",description:"Update user notification preferences",params:[{name:"id",type:"string",required:!0,description:"User ID"},{name:"preferences",type:"object",required:!0,description:"Notification preferences"}],responses:[{code:"200",description:"Preferences updated successfully"},{code:"400",description:"Invalid preferences format"},{code:"404",description:"User not found"}]}]},{name:"Observability Service API",category:"Infrastructure",description:"Collects and visualizes system metrics, logs, and traces",endpoints:[{method:"GET",path:"/api/observability/metrics",description:"Retrieve system metrics",params:[{name:"component",type:"string",required:!1,description:"Filter by component"},{name:"metricName",type:"string",required:!1,description:"Filter by metric name"},{name:"fromTime",type:"string",required:!1,description:"Start time for metrics"},{name:"toTime",type:"string",required:!1,description:"End time for metrics"},{name:"resolution",type:"string",required:!1,description:"Data resolution"}],responses:[{code:"200",description:"Metrics retrieved successfully"}]},{method:"GET",path:"/api/observability/traces/{traceId}",description:"Retrieve a distributed trace by ID",params:[{name:"traceId",type:"string",required:!0,description:"Trace ID"}],responses:[{code:"200",description:"Trace retrieved successfully"},{code:"404",description:"Trace not found"}]},{method:"GET",path:"/api/observability/logs",description:"Search system logs",params:[{name:"service",type:"string",required:!1,description:"Filter by service name"},{name:"level",type:"string",required:!1,description:"Filter by log level"},{name:"query",type:"string",required:!1,description:"Search query"},{name:"fromTime",type:"string",required:!1,description:"Start time for logs"},{name:"toTime",type:"string",required:!1,description:"End time for logs"}],responses:[{code:"200",description:"Logs retrieved successfully"}]},{method:"GET",path:"/api/observability/alerts",description:"Retrieve active and recent alerts",params:[{name:"status",type:"string",required:!1,description:"Filter by alert status"},{name:"severity",type:"string",required:!1,description:"Filter by alert severity"}],responses:[{code:"200",description:"Alerts retrieved successfully"}]},{method:"GET",path:"/api/observability/health",description:"Get system health status",params:[{name:"component",type:"string",required:!1,description:"Filter by component"}],responses:[{code:"200",description:"Health status retrieved successfully"}]}]}],m=[{name:"FHIR API Gateway",category:"External Integration",description:"FHIR R4-compliant API for external system integration",endpoints:[{method:"GET",path:"/api/fhir/[resourceType]",description:"Search for resources of a specific type (FHIR search API)",params:[{name:"resourceType",type:"string",required:!0,description:"FHIR resource type (e.g., Patient, Observation)"},{name:"_id",type:"string",required:!1,description:"Resource identifier"},{name:"patient",type:"string",required:!1,description:"Patient reference"},{name:"*",type:"mixed",required:!1,description:"Any valid FHIR search parameter"}],responses:[{code:"200",description:"Search results returned successfully"},{code:"400",description:"Invalid search parameters"},{code:"403",description:"Access denied"}]},{method:"GET",path:"/api/fhir/[resourceType]/[id]",description:"Retrieve a specific resource by ID",params:[{name:"resourceType",type:"string",required:!0,description:"FHIR resource type"},{name:"id",type:"string",required:!0,description:"Resource ID"}],responses:[{code:"200",description:"Resource retrieved successfully"},{code:"404",description:"Resource not found"},{code:"403",description:"Access denied"}]},{method:"POST",path:"/api/fhir/[resourceType]",description:"Create a new resource",params:[{name:"resourceType",type:"string",required:!0,description:"FHIR resource type"},{name:"resource",type:"object",required:!0,description:"FHIR resource object"}],responses:[{code:"201",description:"Resource created successfully"},{code:"400",description:"Invalid resource format"},{code:"422",description:"Business rule validation failed"}]},{method:"PUT",path:"/api/fhir/[resourceType]/[id]",description:"Update an existing resource",params:[{name:"resourceType",type:"string",required:!0,description:"FHIR resource type"},{name:"id",type:"string",required:!0,description:"Resource ID"},{name:"resource",type:"object",required:!0,description:"Updated FHIR resource object"}],responses:[{code:"200",description:"Resource updated successfully"},{code:"400",description:"Invalid resource format"},{code:"404",description:"Resource not found"},{code:"422",description:"Business rule validation failed"}]},{method:"GET",path:"/api/fhir/metadata",description:"Retrieve FHIR server capability statement",params:[],responses:[{code:"200",description:"Capability statement retrieved successfully"}]}]},{name:"HL7v2 Integration Service",category:"External Integration",description:"HL7v2 messaging gateway for legacy system integration",endpoints:[{method:"POST",path:"/api/hl7/message",description:"Submit an HL7v2 message for processing",params:[{name:"message",type:"string",required:!0,description:"Raw HL7v2 message content"},{name:"source",type:"string",required:!0,description:"Source system identifier"},{name:"messageType",type:"string",required:!1,description:"HL7 message type (e.g., ADT, ORU)"}],responses:[{code:"200",description:"Message processed successfully"},{code:"400",description:"Invalid message format"},{code:"422",description:"Message processing failed"}]},{method:"GET",path:"/api/hl7/connections",description:"List configured HL7 connections",params:[{name:"status",type:"string",required:!1,description:"Filter by connection status"}],responses:[{code:"200",description:"Connections retrieved successfully"}]},{method:"POST",path:"/api/hl7/connections",description:"Configure a new HL7 connection",params:[{name:"connection",type:"object",required:!0,description:"Connection configuration details"}],responses:[{code:"201",description:"Connection created successfully"},{code:"400",description:"Invalid connection configuration"}]},{method:"GET",path:"/api/hl7/translate",description:"Translate between HL7v2 and FHIR formats",params:[{name:"sourceFormat",type:"string",required:!0,description:"Source format (HL7v2 or FHIR)"},{name:"targetFormat",type:"string",required:!0,description:"Target format (HL7v2 or FHIR)"},{name:"content",type:"string",required:!0,description:"Content to translate"}],responses:[{code:"200",description:"Translation successful"},{code:"400",description:"Invalid input format"},{code:"422",description:"Translation failed"}]}]},{name:"X12 EDI Gateway",category:"External Integration",description:"X12 EDI transaction processing for claims and benefits",endpoints:[{method:"POST",path:"/api/x12/parse",description:"Parse X12 EDI content into structured format",params:[{name:"content",type:"string",required:!0,description:"Raw X12 content"},{name:"transactionType",type:"string",required:!1,description:"X12 transaction type (e.g., 837, 835)"}],responses:[{code:"200",description:"Parsing successful"},{code:"400",description:"Invalid X12 format"}]},{method:"POST",path:"/api/x12/generate",description:"Generate X12 EDI content from structured data",params:[{name:"data",type:"object",required:!0,description:"Structured transaction data"},{name:"transactionType",type:"string",required:!0,description:"X12 transaction type to generate"}],responses:[{code:"200",description:"Generation successful"},{code:"400",description:"Invalid input data"}]},{method:"POST",path:"/api/x12/validate",description:"Validate X12 EDI content against transaction specifications",params:[{name:"content",type:"string",required:!0,description:"X12 content to validate"},{name:"transactionType",type:"string",required:!0,description:"X12 transaction type"}],responses:[{code:"200",description:"Validation results returned"},{code:"400",description:"Invalid X12 format"}]},{method:"POST",path:"/api/x12/translate/fhir",description:"Translate between X12 and FHIR formats",params:[{name:"sourceFormat",type:"string",required:!0,description:"Source format (X12 or FHIR)"},{name:"content",type:"string",required:!0,description:"Content to translate"},{name:"transactionType",type:"string",required:!0,description:"Transaction type (e.g., 837/Claim)"}],responses:[{code:"200",description:"Translation successful"},{code:"400",description:"Invalid input format"},{code:"422",description:"Translation failed"}]}]},{name:"SMART on FHIR Service",category:"External Integration",description:"SMART on FHIR app integration framework",endpoints:[{method:"GET",path:"/api/smart/apps",description:"Retrieve registered SMART apps",params:[{name:"status",type:"string",required:!1,description:"Filter by app status"}],responses:[{code:"200",description:"Apps retrieved successfully"}]},{method:"POST",path:"/api/smart/apps",description:"Register a new SMART app",params:[{name:"app",type:"object",required:!0,description:"SMART app registration details"}],responses:[{code:"201",description:"App registered successfully"},{code:"400",description:"Invalid app registration data"},{code:"409",description:"App already registered"}]},{method:"GET",path:"/api/smart/apps/{id}",description:"Retrieve a specific SMART app",params:[{name:"id",type:"string",required:!0,description:"App ID"}],responses:[{code:"200",description:"App retrieved successfully"},{code:"404",description:"App not found"}]},{method:"POST",path:"/api/smart/launch",description:"Launch a SMART app within a context",params:[{name:"appId",type:"string",required:!0,description:"App ID"},{name:"context",type:"object",required:!0,description:"Launch context (patient, user, etc.)"}],responses:[{code:"200",description:"Launch successful, auth URL returned"},{code:"400",description:"Invalid launch parameters"},{code:"404",description:"App not found"}]},{method:"GET",path:"/api/smart/.well-known/smart-configuration",description:"SMART Discovery endpoint",params:[],responses:[{code:"200",description:"SMART configuration retrieved"}]}]}],a=[...v,...b,...i,...m];r(a,t);const I=s=>{navigator.clipboard.writeText(s).then(()=>alert("Code copied to clipboard!")).catch(d=>console.error("Failed to copy: ",d))},P={javascript:{title:"JavaScript",code:`// JavaScript example: Fetch a patient's health record
fetch('/api/phr/patients/123', {
  method: 'GET',
  headers: {
    'Authorization': 'Bearer YOUR_ACCESS_TOKEN',
    'Content-Type': 'application/json'
  }
})
.then(response => response.json())
.then(data => {
  console.log('Patient record:', data);
})
.catch(error => {
  console.error('Error fetching patient record:', error);
});`},python:{title:"Python",code:`# Python example: Fetch a patient's health record
import requests

def get_patient_record(patient_id, access_token):
    url = f"https://api.smarthealthhub.com/api/phr/patients/{patient_id}"
    headers = {
        "Authorization": f"Bearer {access_token}",
        "Content-Type": "application/json"
    }
    
    response = requests.get(url, headers=headers)
    response.raise_for_status()  # Raise exception for 4XX/5XX responses
    
    return response.json()

# Example usage
try:
    patient_data = get_patient_record("123", "YOUR_ACCESS_TOKEN")
    print("Patient record:", patient_data)
except requests.exceptions.RequestException as e:
    print("Error fetching patient record:", e)`},java:{title:"Java",code:`// Java example: Fetch a patient's health record
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;

public class PatientRecordExample {
    public static void main(String[] args) {
        try {
            String patientId = "123";
            String accessToken = "YOUR_ACCESS_TOKEN";
            
            HttpClient client = HttpClient.newHttpClient();
            HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create("https://api.smarthealthhub.com/api/phr/patients/" + patientId))
                .header("Authorization", "Bearer " + accessToken)
                .header("Content-Type", "application/json")
                .GET()
                .build();
                
            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
            
            if (response.statusCode() == 200) {
                System.out.println("Patient record: " + response.body());
            } else {
                System.out.println("Error: " + response.statusCode() + " - " + response.body());
            }
        } catch (Exception e) {
            System.out.println("Exception: " + e.getMessage());
        }
    }
}`},csharp:{title:"C#",code:`// C# example: Fetch a patient's health record
using System;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;

class Program
{
    static async Task Main()
    {
        try
        {
            string patientId = "123";
            string accessToken = "YOUR_ACCESS_TOKEN";
            
            using (var client = new HttpClient())
            {
                client.DefaultRequestHeaders.Authorization = 
                    new AuthenticationHeaderValue("Bearer", accessToken);
                
                var response = await client.GetAsync($"https://api.smarthealthhub.com/api/phr/patients/{patientId}");
                response.EnsureSuccessStatusCode();
                
                string responseBody = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Patient record: {responseBody}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching patient record: {ex.Message}");
        }
    }
}`}},[C,w]=o.useState("javascript");return e.jsx(H,{children:e.jsxs("div",{className:"container mx-auto py-6 space-y-8",children:[e.jsxs("div",{children:[e.jsx("h1",{className:"text-3xl font-bold",children:"API Documentation"}),e.jsx("p",{className:"text-muted-foreground",children:"Comprehensive reference for all Smart Health Hub APIs and external integrations"})]}),e.jsxs(h,{children:[e.jsxs(y,{children:[e.jsx(f,{children:"Overview"}),e.jsx(E,{children:"The Smart Health Hub API provides a comprehensive set of endpoints for healthcare interoperability, patient record management, claims processing, and system integration."})]}),e.jsxs(g,{className:"space-y-6",children:[e.jsxs("div",{children:[e.jsx("h3",{className:"text-xl font-semibold mb-2",children:"Authentication"}),e.jsx("p",{className:"text-sm text-muted-foreground mb-4",children:"All API requests require authentication via JWT bearer tokens. To obtain a token, use the User Directory Service authentication endpoints."}),e.jsxs("div",{className:"bg-muted p-4 rounded-md text-sm font-mono",children:[e.jsx("p",{children:"Example request with authentication:"}),e.jsx("pre",{className:"text-xs mt-2",children:`GET /api/phr/patients/123 HTTP/1.1
Host: api.smarthealthhub.com
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
Content-Type: application/json`})]})]}),e.jsxs("div",{children:[e.jsx("h3",{className:"text-xl font-semibold mb-2",children:"API Categories"}),e.jsxs("div",{className:"grid grid-cols-1 md:grid-cols-4 gap-4",children:[e.jsxs(h,{children:[e.jsx(y,{className:"py-4",children:e.jsxs(f,{className:"text-base flex items-center gap-2",children:[e.jsx(p,{className:"h-2 w-2 rounded-full p-0 bg-blue-500"}),"Core Services"]})}),e.jsx(g,{className:"py-2",children:e.jsx("p",{className:"text-sm text-muted-foreground",children:"PHR, Consent, User Directory, Master Person/Patient Index"})})]}),e.jsxs(h,{children:[e.jsx(y,{className:"py-4",children:e.jsxs(f,{className:"text-base flex items-center gap-2",children:[e.jsx(p,{className:"h-2 w-2 rounded-full p-0 bg-green-500"}),"Claims Services"]})}),e.jsx(g,{className:"py-2",children:e.jsx("p",{className:"text-sm text-muted-foreground",children:"Claims Processing, Prior Authorization, Goldcarding, Eligibility"})})]}),e.jsxs(h,{children:[e.jsx(y,{className:"py-4",children:e.jsxs(f,{className:"text-base flex items-center gap-2",children:[e.jsx(p,{className:"h-2 w-2 rounded-full p-0 bg-purple-500"}),"Infrastructure Services"]})}),e.jsx(g,{className:"py-2",children:e.jsx("p",{className:"text-sm text-muted-foreground",children:"Audit, Notifications, Observability, Integration Gateway"})})]}),e.jsxs(h,{children:[e.jsx(y,{className:"py-4",children:e.jsxs(f,{className:"text-base flex items-center gap-2",children:[e.jsx(p,{className:"h-2 w-2 rounded-full p-0 bg-amber-500"}),"External Integrations"]})}),e.jsx(g,{className:"py-2",children:e.jsx("p",{className:"text-sm text-muted-foreground",children:"FHIR API, HL7v2, X12 EDI, SMART on FHIR"})})]})]})]}),e.jsxs("div",{children:[e.jsx("h3",{className:"text-xl font-semibold mb-2",children:"Code Examples"}),e.jsxs("div",{className:"bg-muted rounded-md overflow-hidden",children:[e.jsxs("div",{className:"flex border-b",children:[e.jsx("div",{className:"flex",children:Object.entries(P).map(([s,d])=>e.jsx("button",{className:`px-4 py-2 text-sm font-medium ${C===s?"bg-background text-foreground":"text-muted-foreground"}`,onClick:()=>w(s),children:d.title},s))}),e.jsx("div",{className:"ml-auto",children:e.jsx("button",{className:"p-2 text-muted-foreground hover:text-foreground",onClick:()=>I(P[C].code),children:e.jsx(F,{className:"h-4 w-4"})})})]}),e.jsx("pre",{className:"p-4 text-xs overflow-auto whitespace-pre",children:e.jsx("code",{children:P[C].code})})]})]})]})]}),e.jsxs("div",{className:"space-y-4",children:[e.jsxs("div",{className:"flex flex-col md:flex-row gap-4 items-start md:items-center",children:[e.jsxs("div",{className:"relative flex-1",children:[e.jsx(G,{className:"absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground"}),e.jsx(O,{type:"text",placeholder:"Search APIs by name, description, or category...",className:"pl-9",value:t,onChange:s=>n(s.target.value)})]}),e.jsx("div",{className:"flex gap-2",children:e.jsx(D,{variant:"outline",size:"sm",onClick:()=>n(""),children:"Clear"})})]}),e.jsxs(k,{defaultValue:"core",className:"space-y-4",children:[e.jsxs(U,{children:[e.jsx(q,{value:"core",children:"Core APIs"}),e.jsx(q,{value:"claims",children:"Claims APIs"}),e.jsx(q,{value:"infrastructure",children:"Infrastructure APIs"}),e.jsx(q,{value:"external",children:"External Integrations"})]}),e.jsxs(j,{value:"core",className:"space-y-4",children:[r(v,t).map(s=>e.jsx(T,{api:s},s.name)),r(v,t).length===0&&e.jsx("div",{className:"text-center py-8 text-muted-foreground",children:"No API endpoints match your search criteria."})]}),e.jsxs(j,{value:"claims",className:"space-y-4",children:[r(b,t).map(s=>e.jsx(T,{api:s},s.name)),r(b,t).length===0&&e.jsx("div",{className:"text-center py-8 text-muted-foreground",children:"No API endpoints match your search criteria."})]}),e.jsxs(j,{value:"infrastructure",className:"space-y-4",children:[r(i,t).map(s=>e.jsx(T,{api:s},s.name)),r(i,t).length===0&&e.jsx("div",{className:"text-center py-8 text-muted-foreground",children:"No API endpoints match your search criteria."})]}),e.jsxs(j,{value:"external",className:"space-y-4",children:[r(m,t).map(s=>e.jsx(T,{api:s},s.name)),r(m,t).length===0&&e.jsx("div",{className:"text-center py-8 text-muted-foreground",children:"No API endpoints match your search criteria."})]})]})]})]})})},T=({api:t})=>{const[n,r]=o.useState(!1),v=i=>{switch(i){case"Core":return"bg-blue-500/10 text-blue-500 hover:bg-blue-500/20";case"Claims":return"bg-green-500/10 text-green-500 hover:bg-green-500/20";case"Infrastructure":return"bg-purple-500/10 text-purple-500 hover:bg-purple-500/20";case"Integration":return"bg-purple-500/10 text-purple-500 hover:bg-purple-500/20";case"External Integration":return"bg-amber-500/10 text-amber-500 hover:bg-amber-500/20";default:return"bg-gray-500/10 text-gray-500 hover:bg-gray-500/20"}},b=i=>{switch(i){case"GET":return"bg-blue-500/10 text-blue-500 border-blue-500/20";case"POST":return"bg-green-500/10 text-green-500 border-green-500/20";case"PUT":return"bg-amber-500/10 text-amber-500 border-amber-500/20";case"DELETE":return"bg-red-500/10 text-red-500 border-red-500/20";default:return"bg-gray-500/10 text-gray-500 border-gray-500/20"}};return e.jsxs(h,{children:[e.jsxs(y,{className:"pb-2",children:[e.jsxs("div",{className:"flex flex-col md:flex-row md:items-center justify-between gap-2",children:[e.jsx(f,{children:t.name}),e.jsx(p,{className:`${v(t.category)}`,children:t.category})]}),e.jsx(E,{children:t.description})]}),e.jsx(g,{className:"pb-2",children:e.jsx(z,{type:"single",collapsible:!0,className:"w-full",children:t.endpoints.map((i,m)=>e.jsxs(_,{value:`${i.method}-${i.path}-${m}`,children:[e.jsx(B,{className:"hover:no-underline",children:e.jsxs("div",{className:"flex items-center text-left",children:[e.jsx(p,{className:`${b(i.method)} mr-2 min-w-16 justify-center border`,children:i.method}),e.jsx("span",{className:"text-sm font-mono truncate",children:i.path})]})}),e.jsx(X,{children:e.jsxs("div",{className:"pt-2 pb-4 space-y-4",children:[e.jsxs("div",{children:[e.jsx("h4",{className:"text-sm font-medium mb-1",children:"Description"}),e.jsx("p",{className:"text-sm text-muted-foreground",children:i.description})]}),e.jsxs("div",{children:[e.jsx("h4",{className:"text-sm font-medium mb-1",children:"Parameters"}),e.jsxs(N,{children:[e.jsx(R,{children:e.jsxs(x,{children:[e.jsx(u,{className:"w-[100px]",children:"Name"}),e.jsx(u,{className:"w-[100px]",children:"Type"}),e.jsx(u,{className:"w-[100px]",children:"Required"}),e.jsx(u,{children:"Description"})]})}),e.jsx(A,{children:i.params.length>0?i.params.map((a,I)=>e.jsxs(x,{children:[e.jsx(c,{className:"font-mono text-xs",children:a.name}),e.jsx(c,{className:"text-xs",children:a.type}),e.jsx(c,{children:a.required?e.jsx(p,{variant:"outline",className:"bg-red-500/10 text-red-500 border-red-500/20",children:"Required"}):e.jsx(p,{variant:"outline",className:"bg-gray-500/10 text-gray-500 border-gray-500/20",children:"Optional"})}),e.jsx(c,{className:"text-xs text-muted-foreground",children:a.description})]},`${a.name}-${I}`)):e.jsx(x,{children:e.jsx(c,{colSpan:4,className:"text-center text-xs text-muted-foreground",children:"No parameters required"})})})]})]}),e.jsxs("div",{children:[e.jsx("h4",{className:"text-sm font-medium mb-1",children:"Responses"}),e.jsxs(N,{children:[e.jsx(R,{children:e.jsxs(x,{children:[e.jsx(u,{className:"w-[100px]",children:"Status Code"}),e.jsx(u,{children:"Description"})]})}),e.jsx(A,{children:i.responses.map((a,I)=>e.jsxs(x,{children:[e.jsx(c,{className:"font-mono text-xs",children:a.code}),e.jsx(c,{className:"text-xs text-muted-foreground",children:a.description})]},`${a.code}-${I}`))})]})]}),e.jsxs("div",{className:"pt-2",children:[e.jsxs("div",{className:"flex items-center text-sm",children:[e.jsx(L,{className:"h-4 w-4 mr-2"}),e.jsx("span",{className:"font-medium",children:"Request Example"})]}),e.jsx("pre",{className:"mt-2 p-3 bg-muted rounded-md text-xs overflow-auto",children:`// Example request
fetch('${i.path.replace(/\{([^}]+)\}/g,"123")}', {
  method: '${i.method}',
  headers: {
    'Authorization': 'Bearer YOUR_ACCESS_TOKEN',
    'Content-Type': 'application/json'
  }${i.method!=="GET"?`,
  body: JSON.stringify({
    // Request payload
  })`:""}
})`})]})]})})]},`${i.method}-${i.path}-${m}`))})}),e.jsx(M,{className:"pt-0",children:e.jsx(D,{variant:"outline",size:"sm",className:"ml-auto",onClick:()=>r(!n),children:n?"Show Less":`Show All Endpoints (${t.endpoints.length})`})})]})};export{Y as default};
